Create database Market_sql;
use Market_sql;

-- create the table
CREATE TABLE sales(
     id INT AUTO_INCREMENT PRIMARY KEY,
     product_id INT,
     quantity INT,
     sale_date date
                  );
select * from sales;

-- Insert sample data
INSERT INTO sales (product_id,quantity,sale_date)
value
    (1,5,'2023-08-01'),
    (1,3,'2023-08-02'),
    (2,7,'2023-08-01'),
    (2,4,'2023-08-03'),
    (3,10,'2023-08-02');

 -- Aggregate Functions
 SELECT SUM(quantity) AS total_quantity from sales;
 SELECT AVG(quantity) AS average_quantity from sales;
 SELECT COUNT(quantity) AS TOTAL_COUNT FROM sales;
 SELECT MIN(quantity) AS min_quantity from sales;
 SELECT MAX(quantity) AS max_quantity FROM sales;

 -- Mathematical Function
 CREATE TABLE data (
	   id INT AUTO_INCREMENT PRIMARY KEY,
       price DECIMAL (10,4),
       quantity INT,
       column1 INT,
       column2 INT
            );

 SELECT * FROM data;

 -- insert sample data
 INSERT INTO DATA (price, quantity, column1, column2)
 VALUES
    (10.000, 5, 10, 15),
    (20.5034, 3, 20, 8),
    (15.7522, 3, 20, 8),
    (5.252, 2, 8, 20),
    (25.9999, 10, 25, 18);

-- Round the price to two decimal places
SELECT price, ROUND(price,2) AS rounded_price FROM data;
-- Find the absolute difference between column1 and column2
SELECT price, column2, ABS (price - column2) AS absolute_difference FROM data;
-- Calculate the square root of the quantity
SELECT quantity, SQRT(quantity) AS sqrt_quantity FROM data;
-- Calculate the power of column1 raised to column2
SELECT column1, column2, POWER (column1, column2) AS power_value FROM data;
-- Find the remainder when dividing column2 by 3
SELECT column2, MOD(Column2,3) AS remainder FROM data;

select price , ROUND(price,2) AS rounded_price , column1,column2, ABS (price - column2) AS absolute_difference
, quantity, SQRT(quantity) AS sqrt_quantity , POWER (column1, column2) AS power_value ,MOD(Column2,3) AS mod_Col2_remainder
FROM data;

-- The CEIL function returns the smallest integer and
-- The FLOOR function returns the largest integer.

SELECT price, CEIL(price) AS ceil_price FROM data;
 SELECT price, FLOOR(price) AS floor_price FROM data;

 SELECT price, CEIL(price) AS ceil_price, FLOOR(price) AS floor_price FROM data;

 -- Date Time Functions

 CREATE TABLE datetime_data (
        id INT AUTO_INCREMENT PRIMARY KEY,
        event_name VARCHAR(50),
        event_date DATETIME);

 INSERT INTO datetime_data ( event_name, event_date)
 VALUES
 ('Event A', '2023-08-15 09:00:00'),
 ('Event B', '2023-08-17 13:00:00'),
 ('Event C', '2023-08-16 10:15:00'),
 ('Event D', '2023-08-15 14:00:00'),
 ('Event E', '2023-08-18 11:45:00');

 SELECT * from datetime_data;

 -- Extract year from event_date
 SELECT event_name, event_date, YEAR(event_date) AS event_year FROM datetime_data;
 -- Extract month from event_date
 SELECT event_name, event_date, MONTH(event_date) AS event_month FROM datetime_data;
 -- Add 3 hours to event_date
 SELECT event_name, event_date, DATE_ADD(event_date, interval 3 hour) AS updated_event_date FROM datetime_data;
 -- Format event_date in a different way
 SELECT event_name, event_date, DATE_FORMAT(event_date,'%y-%m-%d %h:%i %p') AS formatted_event_date FROM datetime_data;
 -- Find the earliest and latest event dates
 SELECT  MIN(event_date) AS earliest_event_date, MAX(event_date) AS latest_event_date FROM datetime_data;
 -- Extract day of the week from event_date (1 = Sunday, 2 = Monday, ...)
 SELECT event_name, event_date, DAYOFWEEK(event_date) AS day_of_week FROM datetime_data;
 -- Retrieve the current date
SELECT CURDATE() AS todays_date;
-- Retrieve the current time
SELECT CURTIME() AS todays_time;

CREATE TABLE employee_details (
         id INT AUTO_INCREMENT PRIMARY KEY,
         first_name VARCHAR (50),
         last_name VARCHAR (50),
         department VARCHAR (50)
                     );

INSERT INTO employee_details(first_name, last_name, department)
VALUES
  ('John','Doe', 'HR'),
  ('Jane','Smith', 'IT'),
  ('Michael','Johnson', 'IT'),
  ('Emily','Williams', 'Finance'),
  ('Robert','Brown', 'Finance');

  SELECT * from employee_details;
  -- Example using LIMIT to retrieve a limited number of rows
  SELECT first_name, last_name FROM employee_details LIMIT 2;
  -- Example using DISTINCT to retrieve unique department names
SELECT DISTINCT department FROM employee_details;
-- Example using AS to create aliases for column names (change the name of column)
SELECT first_name AS "First", last_name AS "Last" FROM employee_details;
-- Example using UNION to combine results from two queries
SELECT first_name, last_name FROM employee_details WHERE department = 'HR' UNION
SELECT first_name, last_name FROM employee_details WHERE department = 'IT';
