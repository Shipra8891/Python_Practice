CREATE database Sql_cls4;
USE Sql_cls4;

CREATE TABLE products (
      product_id INT AUTO_INCREMENT PRIMARY KEY,
      product_name VARCHAR (25),
      price DECIMAL (10, 2),
      quantity_in_stock INT
                       );

INSERT INTO products (product_name, price, quantity_in_stock)
VALUES
    ('Product A', 25.99, 50),
    ('Product B', 75.50, 30),
    ('Product C', 120.00, 10),
    ('Product D', 10.49, 100),
    ('Product E', 200.00, 5),
    ('Product F', 60.75, 20);

SELECT * FROM products;

-- case statement
----------------------------
SELECT
   CASE
     WHEN price<=50 THEN 'Low'
     WHEN price<=100 THEN 'Medium'
     ELSE 'High'
     END AS price_category , price
     FROM products;
----------------------------
SELECT
   CASE
     WHEN price<=50 THEN 'Low'
     WHEN price<=100 THEN 'Medium'
     ELSE 'High'
     END AS price_category,
     COUNT(*) AS product_count, SUM(price) AS total_price
FROM products
GROUP BY price_category;

------------------------------
CREATE TABLE employees (
      employee_id INT AUTO_INCREMENT PRIMARY KEY,
      employee_name VARCHAR (20),
      salary DECIMAL (10,2),
      years_of_service INT
                         );

 INSERT INTO employees (employee_name, salary, years_of_service)
 VALUES
     ('John Doe', 60000.00, 3),
	 ('Jane Smith', 75000.00, 7),
     ('Bob Johnson', 85000.00, 12),
     ('Alice Brown', 100000.00, 18);

SELECT * FROM employees;

SELECT
     employee_id,
     employee_name,
     years_of_service,
     CASE
         WHEN years_of_service < 5 THEN 0
		 WHEN years_of_service >= 5 AND years_of_service < 10 THEN 500
         WHEN years_of_service >= 10 AND years_of_service < 15 THEN 1000
         ELSE 2000
	 END AS bonus_amount
FROM employees;

----------------------------------
CREATE TABLE orders (
       order_id INT AUTO_INCREMENT PRIMARY KEY,
       order_date DATE,
       total_amount DECIMAL (10,2),
       shipping_method VARCHAR (250)
                    );

 INSERT INTO  orders (order_date, total_amount, shipping_method )
 VALUES
     ('2023-09-01',150.00, 'Standard'),
     ('2023-09-02',200.00, 'Express'),
     ('2023-09-03',75.00, 'Standard'),
     ('2023-09-04',300.00, 'Express'),
     ('2023-09-05',50.00, 'Economy');

SELECT * FROM orders;

SELECT
      order_id,
      order_date,
      total_amount,
      shipping_method,
      CASE shipping_method
           WHEN 'Standard' THEN total_amount * 0.1
		   WHEN 'Express' THEN total_amount * 0.2
           ELSE total_amount * 0.05
	  END AS shippping_cost
FROM orders;

-- joins --
CREATE TABLE customers (
      customer_id INT AUTO_INCREMENT PRIMARY KEY,
      customer_name VARCHAR (20),
      email VARCHAR (250)
                         );

INSERT INTO customers (customer_name, email)
VALUES
     ('John Doe', 'john@example.com'),
	 ('Alice Smith', 'alice@example.com'),
     ('Bob Johnson', 'bob@example.com'),
     ('Eve Brown', 'john@example.com');

CREATE TABLE sales (
       sale_id INT AUTO_INCREMENT PRIMARY KEY,
       customer_id INT,
       sale_date DATE,
       total_amount DECIMAL (10,2),
       FOREIGN KEY (customer_id) REFERENCES customers (customer_id)
                     );

INSERT INTO sales (customer_id,sale_date,total_amount)
VALUES
    ( 1,'2023-09-01',150.00),
    ( 2,'2023-09-02',200.00),
    ( 1,'2023-09-03',75.00),
    ( 3,'2023-09-04',300.00),
    ( NULL,'2023-09-05',50.00);

SELECT * FROM customers;
SELECT * FROM sales;

-- INNER JOIN

SELECT *
FROM sales
INNER JOIN customers ON sales.customer_id = customers.customer_id;

SELECT *
FROM customers
INNER JOIN sales ON sales.customer_id = customers.customer_id;

SELECT sales.sale_id, customers.customer_id, sales.total_amount
FROM sales
INNER JOIN customers ON sales.customer_id = customers.customer_id;

-- left join (show full table)
SELECT sales.sale_id, customers.customer_id, sales.total_amount
FROM sales
LEFT JOIN customers ON sales.customer_id = customers.customer_id;

-- right join
SELECT sales.sale_id, customers.customer_id, sales.total_amount
FROM sales
RIGHT JOIN customers ON sales.customer_id = customers.customer_id;

 -- FULL JOIN
 SELECT sales.sale_id, customers.customer_id, sales.total_amount
FROM sales
LEFT JOIN customers ON sales.customer_id = customers.customer_id
UNION
SELECT sales.sale_id, customers.customer_id, sales.total_amount
FROM sales
RIGHT JOIN customers ON sales.customer_id = customers.customer_id;

-- SELF JOIN
CREATE TABLE employes (
      employee_id INT PRIMARY KEY,
      employee_name VARCHAR (50),
      supervisor_id INT
                      );
INSERT INTO employes ( employee_id,employee_name, supervisor_id)
VALUES
    (1, 'John', NULL),
    (2, 'Alice', 1),
    (3, 'Bob', 1),
    (4, 'Eve', 2);

SELECT * FROM employes;

SELECT employes.employee_name AS employee, employes.employeee_name AS supervisor
FROM employes
LEFT JOIN employes ON employes.supervior_id = employes.employee_id;

-- cross join
CREATE TABLE colors (
      color_id INT PRIMARY KEY,
      color_name VARCHAR (250)
                     );
CREATE TABLE sizes (
      size_id INT PRIMARY KEY,
      size_name VARCHAR (250)
                     );

INSERT INTO colors (color_id, color_name)
VALUES
    (1,'Red'), (2,'Blue'), (3,'Green');
 truncate table colors;
INSERT INTO sizes (size_id, size_name)
VALUES
    (1,'Small'), (2,'Medium'), (3,'Large');

SELECT * FROM colors;
SELECT * FROM sizes;

SELECT c.color_name, s.size_name
FROM colors c
CROSS JOIN sizes s;

-- Subquery SQL

CREATE TABLE employe (
      employee_id INT AUTO_INCREMENT PRIMARY KEY,
      employee_name VARCHAR (20),
      department VARCHAR (50),
      salary DECIMAL (10,2)
                            );
INSERT INTO employe (employee_name, department, salary)
VALUES
      ('John Doe', 'HR', 50000.00),
      ('Alice Smith', 'Engineering', 60000.00),
      ('Bob Johnson', 'Engineering', 55000.00),
      ('Eve Brown', 'Finance', 48000.00),
      ('Charlie Brown', 'Finance', 52000.00),
      ('Grace Wilson', 'HR', 48000.00);

SELECT * FROM employe;

-- -- Retrieve all employees whose salary is higher than the average salary.

SELECT department, AVG(salary) FROM employe GROUP BY department;

SELECT AVG(salary) FROM employe;

SELECT employee_name, salary FROM employe
WHERE salary > (SELECT AVG(salary) FROM employe);

-- Find all employees who work in departments with more than one employee.

SELECT employee_name,department FROM employe
WHERE department IN
(SELECT department FROM employe GROUP BY department HAVING COUNT(*) > 1);

-- Find employees whose salary is higher than the average salary in their respective departments.
SELECT employee_name, department, salary
FROM employe
WHERE salary > (SELECT AVG(salary) FROM employe WHERE department = employe.department);

-- Find the employee(s) with the highest salary.
SELECT employee_name, salary
FROM employe
WHERE salary = (SELECT MAX(salary) FROM employe);

-- Highest Salary in Each Department:
SELECT department,MAX(salary) AS highest_salary
FROM employe
GROUP BY department;

-- extra--
CREATE TABLE sample_table (
      id INT AUTO_INCREMENT PRIMARY KEY,
      column1 VARCHAR (250),
      column2 VARCHAR (250)
                            );
INSERT INTO sample_table (column1 , column2)
VALUES
     ('A', 1),
     ('B', 2),
     ('C', 3),
     ('A', 1),
     ('B', 2),
     ('D', 4),
     ('E', 1);

SELECT * FROM sample_table;

-- Find the Most Frequent Value in a Column, Along with Its Frequency Using a Subquery:
SELECT column2, count
FROM (
    SELECT column2, COUNT(*) AS count
    FROM sample_table
    GROUP BY column2
        )
subquery ORDER BY count DESC;

SELECT column2, count
FROM (
    SELECT column2, COUNT(*) AS count
    FROM sample_table
    GROUP BY column2
        )
subquery ORDER BY count DESC LIMIT 1;

-- Find Duplicate Values in 1 Column:
SELECT column1, COUNT(*) AS frequency
FROM sample_table
GROUP BY column1
HAVING COUNT(*) > 1;

-- Find Duplicate Values on 2 Columns Combination:
SELECT column1, column2, COUNT(*) AS frequency
FROM sample_table
GROUP BY column1, column2
HAVING COUNT(*) > 1;

-- How to Delete Duplicate Values:
SET SQL_SAFE_UPDATES = 0;

-- Create a temporary table to store the IDs of rows to be deleted
CREATE TEMPORARY TABLE temp_ids AS
    SELECT MIN(id) AS min_id
    FROM sample_table
    GROUP BY column1, column2;

SELECT * FROM temp_ids;

-- Delete rows from the original table based on the temporary table
DELETE FROM sample_table
WHERE id NOT IN (SELECT min_id FROM temp_ids);

-- Drop the temporary table
DROP TEMPORARY TABLE temp_ids;

select * from sample_table;

